library(catR)
data(tcals)
num_items = 10
DichoItems <- genDichoMatrix(items = 10)
temp_list <- as.list(DichoItems)
library(catR)
help("thetaEst")
View(thetaEst)
View(thetaEst)
help("uniroot")
View(uniroot)
library(catR)
View(eapEst)
View(thetaEst)
View(eapEst)
help("prod")
prod(1:7)
help("genDichoMatrix")
help("genPolyMatrix")
View(EPV)
help(EPV)
help("genPolyMatrix")
genPolyMatrix(10, 4, model = "NRM")
genPolyMatrix(10, 6, model = "NRM")
data(tcals)
library(catR)
data(tcals)
tcals[1,]
Pi(0, tcals[1, ], D = 1)
help(EPV)
Pi(0, tcals, D = 1)
library(catR)
help("genPolyMatrix")
genPolyMatrix(10, 4, model = "GRM")
genPolyMatrix(10, 3, model = "GRM")
View(genPolyMatrix)
View(Pi)
library(catR)
it <- genPolyMatrix(500, 5, model = "GRM", same.nrCat = TRUE)
it <- genPolyMatrix(500, 5, model = "GRM", same.nrCat = TRUE)
x <- genPattern(0, PolyItems, model = modelName)
x <- genPattern(0, it, model = modelName)
x <- genPattern(0, it, model = "GRM")
it <- genPolyMatrix(500, 5, model = "GRM", same.nrCat = TRUE)
x <- genPattern(0, it, model = "GRM")
system.time(th_r <- catR::thetaEst(it, x, model = "GRM", method = "BM", priorDist = "Jeffreys", priorPar = c(-2, 2))
system.time(th_r <- catR::thetaEst(it, x, model = "GRM", method = "BM", priorDist = "Jeffreys", priorPar = c(-2, 2))
)
system.time(th_r <- catR::thetaEst(it, x, model = "GRM", method = "BM", priorDist = "Jeffreys", priorPar = c(-2, 2)))
getwd()
library(catR)
genPolyMatrix(10, 4, model = "PCM")
genPolyMatrix(10, 5, model = "PCM")
set.seed(1)
genPolyMatrix(10, 5, model = "PCM")
genPolyMatrix(10, 5, model = "PCM", same.nrCat = TRUE)
it <- genPolyMatrix(10, 5, model = "PCM", same.nrCat = TRUE)
Pi(-4, it, "PCM", D = 1)
model = "PCM"
D = 1
th = -4
nc <- switch(model, PCM = ncol(it) + 1, GPCM = ncol(it),
RSM = ncol(it), NRM = ncol(it)/2 + 1)
prov <- prov1 <- prov2 <- prov3 <- matrix(NA, nrow(it),
nc)
dj <- v <- 0
for (t in 1:ncol(it)) {
dj <- c(dj, dj[t] + D * (th - it[1, t]))
v <- c(v, t)
}
dj
v
is.na(dj)
!is.na(dj)
v <- v[!is.na(dj)]
dj <- dj[!is.na(dj)]
Gammaj <- exp(dj)
Gammaj
v <- c(v, it[1, 1] * t)
v
dj <- v <- 0
Gammaj <- 0
for (t in 1:ncol(it)) {
dj <- c(dj, dj[t] + D * (th - it[1, t]))
#v <- c(v, t)
v <- c(v, it[1, 1] * t)
}
v
dj <- v <- 0
for (t in 1:ncol(it)) {
dj <- c(dj, dj[t] + D * (th - it[1, t]))
v <- c(v, t)
#v <- c(v, it[1, 1] * t)
}
View(it)
View(prov)
dj
v
v <- v[!is.na(dj)]
dj <- dj[!is.na(dj)]
Gammaj <- exp(dj)
Gammaj
dGammaj <- Gammaj * v
d2Gammaj <- Gammaj * v^2
d3Gammaj <- Gammaj * v^3
dGammaj
Sg <- sum(Gammaj)
Sdg <- sum(dGammaj)
Sd2g <- sum(d2Gammaj)
Sd3g <- sum(d3Gammaj)
n <- length(Gammaj)
View(it)
genPolyMatrix(10, 4, model = "PCM")
View(it)
genPolyMatrix(10, 5, model = "PCM")
View(it)
View(it)
it <- genPolyMatrix(10, 5, model = "PCM", same.nrCat = FALSE)
model = "PCM"
D = 1
th = -4
dj <- v <- 0
Pi(th, it, model, D)
for (t in 1:ncol(it)) {
dj <- c(dj, dj[t] + D * (th - it[1, t]))
v <- c(v, t)
#v <- c(v, it[1, 1] * t)
}
v <- v[!is.na(dj)]
dj <- dj[!is.na(dj)]
Gammaj <- exp(dj)
dGammaj <- Gammaj * v
d2Gammaj <- Gammaj * v^2
d3Gammaj <- Gammaj * v^3
Gammaj
dGammaj
d2Gammaj
d3Gammaj
Sg <- sum(Gammaj)
Sdg <- sum(dGammaj)
Sd2g <- sum(d2Gammaj)
Sd3g <- sum(d3Gammaj)
n <- length(Gammaj)
prov[1, 1:n] <- Gammaj/Sg
prov1[1, 1:n] <- dGammaj/Sg - Gammaj * Sdg/Sg^2
prov2[1, 1:n] <- d2Gammaj/Sg - 2 * dGammaj *
Sdg/Sg^2 - Gammaj * Sd2g/Sg^2 + 2 * Gammaj *
Sdg^2/Sg^3
prov3[1, 1:n] <- d3Gammaj/Sg - (Gammaj * Sd3g + 3 * dGammaj * Sd2g + 3 * d2Gammaj * Sdg)/Sg^2 +
(6 * Gammaj * Sdg * Sd2g + 6 * dGammaj * Sdg^2)/Sg^3 -
6 * Gammaj * Sdg^3/Sg^4
nc <- switch(model, PCM = ncol(it) + 1, GPCM = ncol(it),
RSM = ncol(it), NRM = ncol(it)/2 + 1)
prov <- prov1 <- prov2 <- prov3 <- matrix(NA, nrow(it),
nc)
prov[1, 1:n] <- Gammaj/Sg
prov1[1, 1:n] <- dGammaj/Sg - Gammaj * Sdg/Sg^2
prov2[1, 1:n] <- d2Gammaj/Sg - 2 * dGammaj *
Sdg/Sg^2 - Gammaj * Sd2g/Sg^2 + 2 * Gammaj *
Sdg^2/Sg^3
prov3[1, 1:n] <- d3Gammaj/Sg - (Gammaj * Sd3g + 3 * dGammaj * Sd2g + 3 * d2Gammaj * Sdg)/Sg^2 +
(6 * Gammaj * Sdg * Sd2g + 6 * dGammaj * Sdg^2)/Sg^3 -
6 * Gammaj * Sdg^3/Sg^4
View(prov2)
d2Gammaj/Sg - 2 * dGammaj *
Sdg/Sg^2 - Gammaj * Sd2g/Sg^2 + 2 * Gammaj *
Sdg^2/Sg^3
d2Gammaj/Sg - 2 * dGammaj * Sdg/Sg^2 - Gammaj * Sd2g/Sg^2 + 2 * Gammaj * Sdg^2/Sg^3
d2Gammaj/Sg - 2
d2Gammaj/Sg - 2 * dGammaj
Gammaj/Sg
Gammaj
Gammaj/Sg
9.596397e-01 / 1.04205
Gammaj
1.00 / 1.04
prov[1, 1:n] <- Gammaj/Sg
prov1[1, 1:n] <- dGammaj/Sg - Gammaj * Sdg/Sg^2
prov2[1, 1:n] <- d2Gammaj/Sg - 2 * dGammaj *
Sdg/Sg^2 - Gammaj * Sd2g/Sg^2 + 2 * Gammaj *
Sdg^2/Sg^3
prov3[1, 1:n] <- d3Gammaj/Sg - (Gammaj * Sd3g + 3 * dGammaj * Sd2g + 3 * d2Gammaj * Sdg)/Sg^2 +
(6 * Gammaj * Sdg * Sd2g + 6 * dGammaj * Sdg^2)/Sg^3 -
6 * Gammaj * Sdg^3/Sg^4
Gammaj/Sg
Gammaj[1]/Sg
View(prov)
d2Gammaj[1]/Sg - 2 * dGammaj[1] * Sdg/Sg^2 - Gammaj[1] * Sd2g/Sg^2 + 2 * Gammaj[1] * Sdg^2/Sg^3
View(prov2)
d2Gammaj[1]/Sg
2 * dGammaj[1]
Sdg/Sg^2 - Gammaj[1]
d2Gammaj[1]/Sg - 2 * dGammaj[1] * Sdg/Sg^2 - Gammaj[1]
Sd2g/Sg^2 + 2 * Gammaj[1] * Sdg^2/Sg^3
d2Gammaj[1]/Sg
2 * dGammaj[1] * Sdg/Sg^2
Gammaj[1] * Sd2g/Sg^2
2 * Gammaj[1] * Sdg^2/Sg^3
Pi(th, it, model, D)
View(prov2)
View(it)
v <- v[!is.na(dj)]
genPolyMatrix(10, 4, model = "PCM")
View(thetaEst)
genPolyMatrix(10, 4, model = "PCM", same.nrCat = FALSE)
genPolyMatrix(10, 5, model = "PCM", same.nrCat = FALSE)
genPolyMatrix(10, 5, model = "PCM", same.nrCat = FALSE)
it <- genPolyMatrix(10, 5, model = "PCM", same.nrCat = FALSE)
D= 1
model = "PCM"
x <- genPattern(0, it, model = "PCM")
pr <- Pi(th, it, D = D)
th = -4
pr <- Pi(th, it, D = D)
pr
pr$Pi
p <- Pi(th, it, model = model, D = D)
p$Pi
p
library(Ii)
library(catR)
genPolyMatrix(10, 5, model = "RSM")
genPolyMatrix(10, 5, model = "PCM")
genPolyMatrix(10, 5, model = "NRM")
library(catR)
library(rClr)
setRDotNet(TRUE)
setwd("D:/PROJECT/DIPF_PROJECT/neps-catirt/CS")
dllName <- "../CS/Bin/CatRcs.dll"
clrLoadAssembly(dllName)
items <- genPolyMatrix(10, 4, model = "GRM", same.nrCat = TRUE)
x <- as.integer(genPattern(1, items, model = "GRM"))
itemBank_cs <- clrNew("CatRcs.Models.CATItems", as.integer(100), "GRM", TRUE, as.integer(4), FALSE)
clrGetProperties(itemBank_cs)
clrGetMethods(itemBank_cs)
clrGetMemberSignature(itemBank_cs, "DataWrapper")
col <- clrGet(itemBank_cs, "colSize")
indexVal <- 0
clrCall(itemBank_cs, "DataWrapper", items[,1], as.integer(indexVal))
clrCall(itemBank_cs, "DataWrapper", items[,2], as.integer(1))
clrCall(itemBank_cs, "DataWrapper", items[,3], as.integer(2))
clrCall(itemBank_cs, "DataWrapper", items[,4], as.integer(3))
clrGet(itemBank_cs, "all_items_poly")
set.seed(1)
th_r  <- thetaEst(items, x, model = "GRM", method = "BM")
th_cs <- clrCallStatic("CatRcs.ThetaEST", "ThetaEst_Calc", itemBank_cs, x, "GRM")
as.integer(x)
th_r  <- thetaEst(items, x, model = "GRM", method = "BM")
th_cs <- clrCallStatic("CatRcs.ThetaEST", "ThetaEst_Calc", itemBank_cs, as.integer(x), "GRM")
set.seed(1)
items <- genPolyMatrix(10, 4, model = "GRM", same.nrCat = TRUE)
x <- as.integer(genPattern(1, items, model = "GRM"))
itemBank_cs <- clrNew("CatRcs.Models.CATItems", as.integer(100), "GRM", TRUE, as.integer(4), FALSE)
clrGetProperties(itemBank_cs)
clrGetMethods(itemBank_cs)
clrGetMemberSignature(itemBank_cs, "DataWrapper")
col <- clrGet(itemBank_cs, "colSize")
indexVal <- 0
for(i in 1:col){
# call method on object
clrCall(itemBank_cs, "DataWrapper", items[,i], as.integer(indexVal))
indexVal = indexVal + 1
}
clrGet(itemBank_cs, "all_items_poly")
th_cs <- clrCallStatic("CatRcs.ThetaEST", "ThetaEst_Calc", itemBank_cs, as.integer(x), "GRM",  c(0,1), c(-4,4), as.integer(c(-4,4,33)), 1, "BM")
dllName <- "../CS/Bin/CatRcs.dll"
clrLoadAssembly(dllName)
set.seed(1)
items <- genPolyMatrix(10, 4, model = "GRM", same.nrCat = TRUE)
x <- as.integer(genPattern(1, items, model = "GRM"))
itemBank_cs <- clrNew("CatRcs.Models.CATItems", as.integer(100), "GRM", TRUE, as.integer(4), FALSE)
clrGetProperties(itemBank_cs)
clrGetMethods(itemBank_cs)
clrGetMemberSignature(itemBank_cs, "DataWrapper")
col <- clrGet(itemBank_cs, "colSize")
indexVal <- 0
for(i in 1:col){
# call method on object
clrCall(itemBank_cs, "DataWrapper", items[,i], as.integer(indexVal))
indexVal = indexVal + 1
}
clrGet(itemBank_cs, "all_items_poly")
th_r  <- thetaEst(items, x, model = "GRM", method = "BM")
th_cs <- clrCallStatic("CatRcs.ThetaEST", "ThetaEst_Calc", itemBank_cs, as.integer(x), "GRM", c(0,1), c(-4,4), as.integer(c(-4,4,33)), 1, "BM")
th_cs <- clrCallStatic("CatRcs.ThetaEST", "ThetaEst_Calc", itemBank_cs, as.integer(x), "GRM", c(0,1), c(-4,4), as.integer(c(-4,4,33)), 1, "BM", "norm")
clrGet(itemBank_cs, "all_items_poly")
items
items[,i]
items[,1]
as.numeric(items[1,])
as.numeric(items[,1])
as.matrix(items[,1])
set.seed(1)
items <- genPolyMatrix(10, 4, model = "GRM", same.nrCat = TRUE)
x <- as.integer(genPattern(1, items, model = "GRM"))
itemBank_cs <- clrNew("CatRcs.Models.CATItems", as.integer(100), "GRM", TRUE, as.integer(4), FALSE)
clrGetProperties(itemBank_cs)
clrGetMethods(itemBank_cs)
clrGetMemberSignature(itemBank_cs, "DataWrapper")
col <- clrGet(itemBank_cs, "colSize")
indexVal <- 0
for(i in 1:col){
# call method on object
clrCall(itemBank_cs, "DataWrapper", as.matrix(items[,i]), as.integer(indexVal))
indexVal = indexVal + 1
}
clrGet(itemBank_cs, "all_items_poly")
th_r  <- thetaEst(items, x, model = "GRM", method = "BM")
th_cs <- clrCallStatic("CatRcs.ThetaEST", "ThetaEst_Calc", itemBank_cs, as.integer(x), "GRM", c(0,1), c(-4,4), as.integer(c(-4,4,33)), 1, "BM", "norm")
data(tcals)
items <- as.matrix(tcals[1:80,1:4])
x <- as.integer(genPattern(-1, items))
itemBank_cs = clrNew("CatRcs.Models.CATItems",items[,1], items[,2], items[,3],items[,4],FALSE)
clrGet(itemBank_cs, "a")
clrGet(itemBank_cs, "all_items_poly")
set.seed(1)
items <- genPolyMatrix(10, 4, model = "GRM", same.nrCat = TRUE)
x <- as.integer(genPattern(1, items, model = "GRM"))
itemBank_cs <- clrNew("CatRcs.Models.CATItems", as.integer(100), "GRM", TRUE, as.integer(4), FALSE)
clrGetProperties(itemBank_cs)
clrGetMethods(itemBank_cs)
clrGetMemberSignature(itemBank_cs, "DataWrapper")
col <- clrGet(itemBank_cs, "colSize")
indexVal <- 0
for(i in 1:col){
# call method on object
clrCall(itemBank_cs, "DataWrapper", as.matrix(items[,i]), as.integer(indexVal))
indexVal = indexVal + 1
}
clrGet(itemBank_cs, "all_items_poly")
th_r  <- thetaEst(items, x, model = "GRM", method = "BM")
th_cs <- clrCallStatic("CatRcs.ThetaEST", "ThetaEst_Calc", itemBank_cs, as.integer(x), "GRM", c(0,1), c(-4,4), as.integer(c(-4,4,33)), 1, "BM", "norm")
th_cs <- clrCallStatic("CatRcs.ThetaEST", "ThetaEst_Calc", itemBank_cs, as.integer(x), "GRM", c(0,1), c(-4,4), as.integer(c(-4,4,33)), 1, "BM")
th_cs <- clrCallStatic("CatRcs.ThetaEST", "ThetaEst_Calc", itemBank_cs, x, "GRM", c(0,1), c(-4,4), as.integer(c(-4,4,33)), 1, "BM")
